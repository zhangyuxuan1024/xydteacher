package net.iclassmate.teacherspace.ui.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.umeng.analytics.MobclickAgent;

import net.iclassmate.teacherspace.BuildConfig;
import net.iclassmate.teacherspace.R;
import net.iclassmate.teacherspace.bean.login.Login_school_config;
import net.iclassmate.teacherspace.bean.login.Login_teacherInfo;
import net.iclassmate.teacherspace.bean.login.Login_use;
import net.iclassmate.teacherspace.constant.Constants;
import net.iclassmate.teacherspace.ui.activity.dialog.InputUserCode;
import net.iclassmate.teacherspace.utils.JsonUtils;
import net.iclassmate.teacherspace.utils.LoginUtils;
import net.iclassmate.teacherspace.utils.NetWorkUtils;
import net.iclassmate.teacherspace.utils.StringUtils;
import net.iclassmate.teacherspace.utils.ToastUtils;
import net.iclassmate.teacherspace.utils.UIUtils;

import org.apache.http.entity.StringEntity;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;

/**
 * 登录界面
 * Created by xyd on 2016/1/29.
 */
public class LoginActivity extends Activity implements View.OnClickListener, LoginUtils.LoginCallback, View.OnLayoutChangeListener {

    public static final int NOTICE_START_ACTIVITY_SCHOOL_CODE = 400;
    public static final int NOTICE_CODE_SCHOOL_ACTIVITY_RESULT = 401;
    public static final int NOTICE_CODE_SCHOOL_ACTIVITY_RESULT_OTHER = 402;
    public static final int NOTICE_CODE_SCHOOL_ACTIVITY_RESULT_NONE = 403;

    private Login_school_config loginschoolconfig;

    private ImageView identity, icon;
    private TextView forgetPassword, school_name;
    private Button loginButton;
    private LinearLayout change_school_layout;
    private EditText userName, passWord;
    private Context mContext;
    private LoginUtils mLoginUtils;
    private Login_teacherInfo login_teacherInfo;
    private View loadingbar;
    private SharedPreferences msharedPreferences;
    private Set<String> roleName;
    private Set<String> teacherInfo;

    private LinearLayout.LayoutParams params;

    private RelativeLayout activityRootView;

    private String classCode = "";
    private String schoolId = "";
    private String gradeId = "";
    private String userId = "";
    private String courseId = "";
    private String roleId = "";
    private String termCode = "";
    private String enterYear = "";

    private  Boolean hadlogin;
    private String loginTime;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_login);

        this.mContext = this;

        roleName = new HashSet<String>();
        teacherInfo = new HashSet<String>();
        msharedPreferences = mContext.getSharedPreferences(Constants.SHARED_PREFERENCES, Context.MODE_PRIVATE);

        hadlogin = msharedPreferences.getBoolean("had_login", false);
        String userCode = msharedPreferences.getString("userCode", "");
        String password = msharedPreferences.getString("password", "");
        String urlPath = msharedPreferences.getString("LoginServUrl", "");
        initView();

        Log.i("lxw", "hadlogin=" + hadlogin + "----userCode=" + userCode + "-----password=" + password
                + "urlPath=" + urlPath);

        if (hadlogin && !userCode.equals("")
                && !urlPath.equals("") && !password.equals("")) {
            postUserInfo();
            startActivity(new Intent(LoginActivity.this, MainActivity.class));
            this.finish();
        }
    }

    private void initView() {
        this.loginButton = (Button) this.findViewById(R.id.login_btn);
        this.change_school_layout = (LinearLayout) this.findViewById(R.id.change_school_layout);
        this.userName = (EditText) this.findViewById(R.id.user_et);
        this.passWord = (EditText) this.findViewById(R.id.password_et);
        this.forgetPassword = (TextView) this.findViewById(R.id.forget_password);
        this.school_name = (TextView) this.findViewById(R.id.school_name);
        this.activityRootView = (RelativeLayout) this.findViewById(R.id.root_layout);
        this.identity = (ImageView) this.findViewById(R.id.img_identity);
        this.icon = (ImageView) this.findViewById(R.id.image_icon);

        params = (LinearLayout.LayoutParams) icon.getLayoutParams();


        loadingbar = findViewById(R.id.loadingbar);

        forgetPassword.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);
        userName.setHintTextColor(Color.parseColor("#bbbbbb"));
        passWord.setHintTextColor(Color.parseColor("#bbbbbb"));

        mLoginUtils = new LoginUtils();
        mLoginUtils.setLoginCallback(this);

        this.loginButton.setOnClickListener(this);
        this.forgetPassword.setOnClickListener(this);
        this.change_school_layout.setOnClickListener(this);

        userName.setText(msharedPreferences.getString("userCode", ""));
        passWord.setText(msharedPreferences.getString("password", ""));
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.login_btn:
                if (ischecklogin()) {
                    long currentTime = System.currentTimeMillis();
                    Log.i("lxw", "点击登陆按钮的时间：" + currentTime);
                    SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Date d1=new Date(currentTime);
                    loginTime=format.format(d1);
                    loadingbar.setVisibility(View.VISIBLE);
                    Login_use login = new Login_use();
                    if (!school_name.getText().toString().equals("")) {
                        try {
                            login.setUrlPath(loginschoolconfig
                                    .getLoginServUrl());
                        } catch (Exception e) {
                            login.setUrlPath(Constants.BASE_LOGIN_URL);
                        }

                    } else {
                        login.setUrlPath(Constants.BASE_LOGIN_URL);
                    }
                    login.setUsercode(userName.getText().toString().trim());
                    login.setPassword(passWord.getText().toString().trim());

                    Log.i("lxw", login.getUrlPath() + ",getUsercode=" + login.getUsercode() + ",getPassword=" + login.getPassword());

                    if (login.getUrlPath() != null) {
                        mLoginUtils.login(mContext, login);
                    } else {
                        loadingbar.setVisibility(View.INVISIBLE);
                    }

                }
                break;
            case R.id.change_school_layout:

                Intent intent1 = new Intent(LoginActivity.this, LoginSearchSchoolActivity.class);
                startActivityForResult(intent1,
                        NOTICE_START_ACTIVITY_SCHOOL_CODE);
//                LoginActivity.this.finish();
                break;
            case R.id.forget_password:

                Intent intent2 = new Intent(LoginActivity.this, InputUserCode.class);
                startActivity(intent2);
                break;
        }
    }

    private boolean ischecklogin() {
        String user_name = userName.getText().toString();
        String password = passWord.getText().toString();
        if (!NetWorkUtils.isNetworkAvailable(UIUtils.getContext())) {
            Toast.makeText(UIUtils.getContext(), "请检查您的网络链接！", Toast.LENGTH_SHORT).show();
            return false;
        } else if (StringUtils.isEmpty(user_name)) {
            Toast.makeText(UIUtils.getContext(), "请输入账号！", Toast.LENGTH_SHORT).show();
            return false;
        } else if (StringUtils.isEmpty(password)) {
            Toast.makeText(UIUtils.getContext(), "请输入密码！", Toast.LENGTH_SHORT).show();
            return false;
        } else
            return true;
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {

        if (requestCode == NOTICE_START_ACTIVITY_SCHOOL_CODE) {
            switch (resultCode) {
                case NOTICE_CODE_SCHOOL_ACTIVITY_RESULT:
                    loginschoolconfig = (Login_school_config) intent.getExtras()
                            .getSerializable("schoolconfig");
                    school_name.setText(loginschoolconfig.getSchoolName());
                    school_name.setTextColor(Color.BLACK);
                    break;
                case NOTICE_CODE_SCHOOL_ACTIVITY_RESULT_OTHER:
                    String schoolname = intent.getExtras().getString("schoolInfo");
                    school_name.setText(schoolname);
                    school_name.setTextColor(Color.BLACK);
                    break;
                case NOTICE_CODE_SCHOOL_ACTIVITY_RESULT_NONE:
                    school_name.setText("");
                    break;
                default:
                    break;
            }
        }
    }

    @Override
    public void successMsg(String msg) {
        try {
            if (msg != null) {
                login_teacherInfo = JsonUtils.jsontologinuserInfo(msg);
                Log.i("lxw", login_teacherInfo.getLogin_userInfos().toString());
                loadingbar.setVisibility(View.INVISIBLE);
                if (login_teacherInfo.getResultCode() == 0) {
                    getinsystem();
                    postUserInfo();
                    //友盟统计账号
                    MobclickAgent.onProfileSignIn(login_teacherInfo.getLogin_userInfos().get(0).getUserId());

                } else if (StringUtils.isEmpty(school_name.getText().toString())) {
                    loadingbar.setVisibility(View.INVISIBLE);
                    Toast.makeText(mContext, "账号或密码不正确！",
                            Toast.LENGTH_SHORT).show();
                }

            } else {
                loadingbar.setVisibility(View.INVISIBLE);
                Toast.makeText(mContext, "账号或密码不正确！", Toast.LENGTH_SHORT)
                        .show();
            }
        } catch (Exception e) {
            loadingbar.setVisibility(View.INVISIBLE);
            Toast.makeText(mContext, "账号或密码不正确！", Toast.LENGTH_SHORT).show();
        }

    }

    @Override
    public void errorMsg(String errorMsg) {
        loadingbar.setVisibility(View.INVISIBLE);
        ToastUtils.show(UIUtils.getContext(), errorMsg);
    }

    private void getinsystem() {
        if (loadingbar != null) {
            loadingbar.setVisibility(View.GONE);
        }
//        Toast.makeText(mContext, "登录成功！", Toast.LENGTH_SHORT).show();
//
        msharedPreferences
                .edit()
                .putString("userCode",
                        login_teacherInfo.getLogin_userInfos().get(0).getUserCode()).apply();
        msharedPreferences
                .edit()
                .putString("password",
                        passWord.getText().toString().trim()).apply();
        msharedPreferences
                .edit()
                .putString("teacherName", login_teacherInfo.getLogin_userInfos().get(0).getTeacherName()).apply();
        msharedPreferences
                .edit()
                .putString("mobileNum", login_teacherInfo.getLogin_userInfos().get(0).getMobileNum()).apply();

        msharedPreferences.edit().putString("teacherRoleId",login_teacherInfo.getLogin_userInfos().get(0).getRoles().getRoleId()+"").apply();

        //缓存数据
        cacheData();

        msharedPreferences.edit().putStringSet("teacherInfo", teacherInfo).apply();
        if (StringUtils.isEmpty(school_name.getText().toString())) {
            msharedPreferences.edit()
                    .putString("LoginServUrl", Constants.BASE_LOGIN_URL).apply();
        } else {
        }

        msharedPreferences.edit().putBoolean("had_login", true).apply();

        startActivity(new Intent(LoginActivity.this, MainActivity.class));
        this.finish();
    }

    private void cacheData() {
        //缓存数据
        for (int i = 0; i < login_teacherInfo.getLogin_userInfos().size(); i++) {

            if (login_teacherInfo.getLogin_userInfos().size() - 1 != i) {
                classCode += login_teacherInfo.getLogin_userInfos().get(i).getClassCode() + ",";
                schoolId += login_teacherInfo.getLogin_userInfos().get(i).getSchoolId() + ",";
                gradeId += login_teacherInfo.getLogin_userInfos().get(i).getGradeId() + ",";
                userId += login_teacherInfo.getLogin_userInfos().get(i).getUserId() + ",";
                courseId += login_teacherInfo.getLogin_userInfos().get(i).getCourseId() + ",";
                termCode += login_teacherInfo.getLogin_userInfos().get(i).getTermCode() + ",";
                enterYear += login_teacherInfo.getLogin_userInfos().get(i).getEnterYear() + ",";
                roleId += login_teacherInfo.getLogin_userInfos().get(i).getRoles().getRoleId() + ",";
            } else {
                classCode += login_teacherInfo.getLogin_userInfos().get(i).getClassCode();
                schoolId += login_teacherInfo.getLogin_userInfos().get(i).getSchoolId();
                gradeId += login_teacherInfo.getLogin_userInfos().get(i).getGradeId();
                userId += login_teacherInfo.getLogin_userInfos().get(i).getUserId();
                courseId += login_teacherInfo.getLogin_userInfos().get(i).getCourseId();
                termCode += login_teacherInfo.getLogin_userInfos().get(i).getTermCode();
                enterYear += login_teacherInfo.getLogin_userInfos().get(i).getEnterYear();
                roleId += login_teacherInfo.getLogin_userInfos().get(i).getRoles().getRoleId();
            }

            //个人界面需要的信息
            msharedPreferences.edit().putInt("count", login_teacherInfo.getLogin_userInfos().size()).apply();
            teacherInfo.add(login_teacherInfo.getLogin_userInfos().get(i).getCourseName());
            teacherInfo.add(login_teacherInfo.getLogin_userInfos().get(i).getGradeName());
            roleName.add(login_teacherInfo.getLogin_userInfos().get(i).getRoles().getRoleName());
        }
        Log.i("教师角色", roleId);
        msharedPreferences.edit().putString("userId", userId).apply();
        msharedPreferences.edit().putString("schoolId", schoolId).apply();
        msharedPreferences.edit().putString("gradeId", gradeId).apply();
        msharedPreferences.edit().putString("classCode", classCode).apply();
        msharedPreferences.edit().putString("courseId", courseId).apply();
        msharedPreferences.edit().putString("termCode", termCode).apply();
        msharedPreferences.edit().putString("enterYear", enterYear).apply();
        msharedPreferences.edit().putString("roleId", roleId).apply();
        msharedPreferences.edit().putStringSet("role", roleName).apply();

    }

    @Override
    public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {

        if (oldBottom != 0 && bottom != 0 && (oldBottom - bottom > 100)) {

            this.identity.setVisibility(View.GONE);
            params.topMargin = dp2px(this, 10);
            this.icon.setLayoutParams(params);
//            this.icon.setLayoutParams(params);
//            Toast.makeText(LoginActivity.this, "监听到软键盘弹起...", Toast.LENGTH_SHORT).show();
//            forgetPassword.setVisibility(View.GONE);
        } else if (oldBottom != 0 && bottom != 0 && (bottom - oldBottom > 0)) {

            params.topMargin = dp2px(this, 80);
            this.icon.setLayoutParams(params);
            this.identity.setVisibility(View.VISIBLE);
//            Toast.makeText(LoginActivity.this, "监听到软件盘关闭...", Toast.LENGTH_SHORT).show();
//            forgetPassword.setVisibility(View.VISIBLE);
        }
    }

    //DP转PX
    public static int dp2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }

    @Override
    public void onResume() {
        super.onResume();
        //添加layout大小发生改变监听器
        this.activityRootView.addOnLayoutChangeListener(this);

        MobclickAgent.onPageStart("LoginActivity"); //统计页面(仅有Activity的应用中SDK自动调用，不需要单独写。"SplashScreen"为页面名称，可自定义)
        MobclickAgent.onResume(this);          //统计时长
    }

    @Override
    public void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("LoginActivity"); // （仅有Activity的应用中SDK自动调用，不需要单独写）保证 onPageEnd 在onPause 之前调用,因为 onPause 中会保存信息。"SplashScreen"为页面名称，可自定义
        MobclickAgent.onPause(this);
    }

    public void postUserInfo() {
        String destUrl = Constants.COLLECT_USERINFO_URL;
        HttpUtils httpUtils = new HttpUtils();
        String serverIp=Constants.ADDRESS;
        String loginIp=getLocalIpAddress();
        String versionName = BuildConfig.VERSION_NAME;
        String device=android.os.Build.MODEL;
        String osVersion=android.os.Build.VERSION.RELEASE;

        Log.i("发送用户信息", destUrl);
        JSONObject param = new JSONObject();
        try {
            if (!hadlogin) {
                param.put("userCode",login_teacherInfo.getLogin_userInfos().get(0).getUserCode());
                param.put("userId", login_teacherInfo.getLogin_userInfos().get(0).getUserId());
                param.put("userName", login_teacherInfo.getLogin_userInfos().get(0).getUserName());
                param.put("schoolId", login_teacherInfo.getLogin_userInfos().get(0).getSchoolId());
                param.put("userType", login_teacherInfo.getLogin_userInfos().get(0).getRoles().getRoleId());
            }else {
                param.put("userCode", msharedPreferences.getString("userCode", ""));
                param.put("userId", msharedPreferences.getString("userId", ""));
                param.put("userName",  msharedPreferences.getString("userName", ""));
                param.put("schoolId", msharedPreferences.getString("schoolId", ""));
                param.put("userType", msharedPreferences.getString("teacherRoleId",""));
            }
            param.put("type", "UserLoginInfo");
            param.put("loginIp",loginIp);
            param.put("loginTime", loginTime);
            param.put("logoutTime","");
            param.put("appId","20002");
            param.put("serverIp",serverIp);
            param.put("appVersion", versionName);
            param.put("platform","android");
            param.put("device", device);
            param.put("osVersion",osVersion);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        String jsonstr = param.toString();
        RequestParams params = new RequestParams();
        try {
            params.setBodyEntity(new StringEntity(jsonstr));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        Log.i("发送用户信息", jsonstr + "");

        httpUtils.send(HttpRequest.HttpMethod.POST, destUrl, params, new RequestCallBack<String>() {
            @Override
            public void onSuccess(ResponseInfo<String> responseInfo) {
                Log.i("发送用户信息", "onSuccess");
            }

            @Override
            public void onFailure(HttpException error, String msg) {
                Log.i("错误信息",msg);
            }
        });
    }

    /**
     * 获取用户IP
     * @return
     */
    public String getLocalIpAddress() {
        String ipaddress="";


        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface
                    .getNetworkInterfaces(); en.hasMoreElements();) {
                NetworkInterface intf = en.nextElement();
                for (Enumeration<InetAddress> enumIpAddr = intf
                        .getInetAddresses(); enumIpAddr.hasMoreElements();) {
                    InetAddress inetAddress = enumIpAddr.nextElement();
                    ipaddress=inetAddress.getHostAddress().toString();
                }
            }
        } catch (SocketException ex) {
//            Log.e("WifiPreference IpAddress", ex.toString());
        }

        return ipaddress;
    }

}
